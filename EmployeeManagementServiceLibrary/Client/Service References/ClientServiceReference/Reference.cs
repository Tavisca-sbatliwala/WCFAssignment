//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ClientServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeManagement", Namespace="http://schemas.datacontract.org/2004/07/EmployeeManagementServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class EmployeeManagement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSubmittedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpID {
            get {
                return this.EmpIDField;
            }
            set {
                if ((this.EmpIDField.Equals(value) != true)) {
                    this.EmpIDField = value;
                    this.RaisePropertyChanged("EmpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSubmitted {
            get {
                return this.TimeSubmittedField;
            }
            set {
                if ((this.TimeSubmittedField.Equals(value) != true)) {
                    this.TimeSubmittedField = value;
                    this.RaisePropertyChanged("TimeSubmitted");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientServiceReference.IEmployeeAdd")]
    public interface IEmployeeAdd {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/CreateEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/CreateEmployeeResponse")]
        Client.ClientServiceReference.EmployeeManagement CreateEmployee(int id, string name, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/CreateEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> CreateEmployeeAsync(int id, string name, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/AddEmployeeResponse")]
        void AddEmployee(Client.ClientServiceReference.EmployeeManagement emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(Client.ClientServiceReference.EmployeeManagement emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/RemoveEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/RemoveEmployeeResponse")]
        void RemoveEmployee(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeAdd/RemoveEmployee", ReplyAction="http://tempuri.org/IEmployeeAdd/RemoveEmployeeResponse")]
        System.Threading.Tasks.Task RemoveEmployeeAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeAddChannel : Client.ClientServiceReference.IEmployeeAdd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeAddClient : System.ServiceModel.ClientBase<Client.ClientServiceReference.IEmployeeAdd>, Client.ClientServiceReference.IEmployeeAdd {
        
        public EmployeeAddClient() {
        }
        
        public EmployeeAddClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeAddClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeAddClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeAddClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ClientServiceReference.EmployeeManagement CreateEmployee(int id, string name, string comments) {
            return base.Channel.CreateEmployee(id, name, comments);
        }
        
        public System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> CreateEmployeeAsync(int id, string name, string comments) {
            return base.Channel.CreateEmployeeAsync(id, name, comments);
        }
        
        public void AddEmployee(Client.ClientServiceReference.EmployeeManagement emp) {
            base.Channel.AddEmployee(emp);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(Client.ClientServiceReference.EmployeeManagement emp) {
            return base.Channel.AddEmployeeAsync(emp);
        }
        
        public void RemoveEmployee(string id) {
            base.Channel.RemoveEmployee(id);
        }
        
        public System.Threading.Tasks.Task RemoveEmployeeAsync(string id) {
            return base.Channel.RemoveEmployeeAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientServiceReference.IEmployeeRemark")]
    public interface IEmployeeRemark {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/SearchById", ReplyAction="http://tempuri.org/IEmployeeRemark/SearchByIdResponse")]
        Client.ClientServiceReference.EmployeeManagement SearchById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/SearchById", ReplyAction="http://tempuri.org/IEmployeeRemark/SearchByIdResponse")]
        System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> SearchByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/SearchByName", ReplyAction="http://tempuri.org/IEmployeeRemark/SearchByNameResponse")]
        Client.ClientServiceReference.EmployeeManagement SearchByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/SearchByName", ReplyAction="http://tempuri.org/IEmployeeRemark/SearchByNameResponse")]
        System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> SearchByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/GetAllEmployee", ReplyAction="http://tempuri.org/IEmployeeRemark/GetAllEmployeeResponse")]
        Client.ClientServiceReference.EmployeeManagement[] GetAllEmployee();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeRemark/GetAllEmployee", ReplyAction="http://tempuri.org/IEmployeeRemark/GetAllEmployeeResponse")]
        System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement[]> GetAllEmployeeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeRemarkChannel : Client.ClientServiceReference.IEmployeeRemark, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeRemarkClient : System.ServiceModel.ClientBase<Client.ClientServiceReference.IEmployeeRemark>, Client.ClientServiceReference.IEmployeeRemark {
        
        public EmployeeRemarkClient() {
        }
        
        public EmployeeRemarkClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeRemarkClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeRemarkClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeRemarkClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ClientServiceReference.EmployeeManagement SearchById(int id) {
            return base.Channel.SearchById(id);
        }
        
        public System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> SearchByIdAsync(int id) {
            return base.Channel.SearchByIdAsync(id);
        }
        
        public Client.ClientServiceReference.EmployeeManagement SearchByName(string name) {
            return base.Channel.SearchByName(name);
        }
        
        public System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement> SearchByNameAsync(string name) {
            return base.Channel.SearchByNameAsync(name);
        }
        
        public Client.ClientServiceReference.EmployeeManagement[] GetAllEmployee() {
            return base.Channel.GetAllEmployee();
        }
        
        public System.Threading.Tasks.Task<Client.ClientServiceReference.EmployeeManagement[]> GetAllEmployeeAsync() {
            return base.Channel.GetAllEmployeeAsync();
        }
    }
}
